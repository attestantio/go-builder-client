// Code generated by fastssz. DO NOT EDIT.
// Hash: e6a4c823074e3e94ee4bfaefc5a709a81decc5fb30b7fd22e0b2e8b9820bbcac
// Version: 0.1.4
package v1

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SignedValidatorRegistrations object
func (s *SignedValidatorRegistrations) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedValidatorRegistrations object to a target array
func (s *SignedValidatorRegistrations) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Registrations'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Registrations'
	if size := len(s.Registrations); size > 1099511627776 {
		err = ssz.ErrListTooBigFn("SignedValidatorRegistrations.Registrations", size, 1099511627776)
		return
	}
	for ii := 0; ii < len(s.Registrations); ii++ {
		if dst, err = s.Registrations[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedValidatorRegistrations object
func (s *SignedValidatorRegistrations) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Registrations'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Registrations'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 180, 1099511627776)
		if err != nil {
			return err
		}
		s.Registrations = make([]*SignedValidatorRegistration, num)
		for ii := 0; ii < num; ii++ {
			if s.Registrations[ii] == nil {
				s.Registrations[ii] = new(SignedValidatorRegistration)
			}
			if err = s.Registrations[ii].UnmarshalSSZ(buf[ii*180 : (ii+1)*180]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedValidatorRegistrations object
func (s *SignedValidatorRegistrations) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Registrations'
	size += len(s.Registrations) * 180

	return
}

// HashTreeRoot ssz hashes the SignedValidatorRegistrations object
func (s *SignedValidatorRegistrations) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedValidatorRegistrations object with a hasher
func (s *SignedValidatorRegistrations) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Registrations'
	{
		subIndx := hh.Index()
		num := uint64(len(s.Registrations))
		if num > 1099511627776 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.Registrations {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1099511627776)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedValidatorRegistrations object
func (s *SignedValidatorRegistrations) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
